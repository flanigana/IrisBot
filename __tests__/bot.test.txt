import container from "../inversify.config";
import { TYPES } from "../src/types";
import { Client, Message, TextChannel, User } from "discord.js";
import { Bot } from "../src/bot";

jest.mock('discord.js');

describe('Bot', () => {
    let clientMock: Client;
    let channelMock: TextChannel;
    let userMock: User;
    let messageMock: Message;
    let bot: Bot;
    beforeAll(() => {
        clientMock = jest.createMockFromModule('discord.js');
        clientMock.login = jest.fn();
        clientMock.on = jest.fn();
        clientMock.emit = jest.fn();
        container.rebind<Client>(TYPES.Client).toConstantValue(clientMock);
        channelMock = jest.createMockFromModule('discord.js');
        userMock = jest.createMockFromModule('discord.js');
        userMock.bot = false;
    });
    beforeEach(() => {
        bot = container.get<Bot>(TYPES.Bot);
        bot.listen();
        messageMock = jest.createMockFromModule('discord.js');
        messageMock.author = userMock;
    });
    describe('startsWithValidPrefix', () => {
        test('startsWithValidPrefix returns false when message does not begin with valid prefix', () => {
            messageMock.content = 'test';
            expect(bot.startsWithValidPrefix(messageMock)).toBeFalsy();
        });
        test('startsWithValidPrefix returns true when message does begin with valid prefix', () => {
            messageMock.content = '-test';
            expect(bot.startsWithValidPrefix(messageMock)).toBeTruthy();
        });
    });
    describe('client events', () => {
        describe('message events', () => {
            test('startsWithValidPrefix is called when message is received', () => {
                bot.startsWithValidPrefix = jest.fn();
                messageMock.content = 'test';
                clientMock.emit('message', messageMock);
                expect(bot.startsWithValidPrefix).toHaveBeenCalled();
            });
        });
    });
});